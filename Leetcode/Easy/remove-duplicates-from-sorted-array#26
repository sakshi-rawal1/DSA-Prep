Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

class Solution {
    public int removeDuplicates(int[] nums) {
        int unique = 0;
        for(int curr = 0;curr<nums.length;curr++){
            if(nums[curr]!=nums[unique]){
                int temp = nums[curr];
                nums[curr] = nums[unique+1];
                nums[unique+1] = temp;
                unique++;
            }
        }
        return unique+1;
    }
}

TC-O(n)
SC-O(1)

Approach 
we will be using two pointer technique
one pointer will keep track of unique elements 
other pointer will keep track of curr element 

we will swap the curr with unique+1 in order to maintain the unique elements in the array
