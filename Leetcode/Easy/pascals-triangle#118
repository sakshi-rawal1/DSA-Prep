Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();
        //Creating first row
        List<Integer> first_row = new ArrayList<>();
        first_row.add(1);
        triangle.add(first_row);
        
        //Adding the rest of the rows using prev_row ie first_row
        for(int i =1;i<numRows;i++){
            //list to store prev_row
            List<Integer> prev_row = triangle.get(i-1);
            //list to add into triangle
            List<Integer> row = new ArrayList<>();
            
            //add first element to the row as 1
            row.add(1);
            
            //add middle elements in the row using prev_row
            for(int j = 1;j<i;j++){
                row.add(prev_row.get(j-1)+prev_row.get(j));
            }
            
            //add last element to the row as 1
            row.add(1);
            
            //add this newly created row to the triangle
            triangle.add(row);
        }
        return triangle;
        
    }
}

TC - O(numRows*numRows)
SC - O(numRows*numRows)

