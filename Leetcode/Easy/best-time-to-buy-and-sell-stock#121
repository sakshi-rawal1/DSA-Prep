Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Constraints 
1 <= prices.length <= 10^5
0 <= prices[i] <= 10^4

class Solution {
    public int maxProfit(int[] prices) {
       int largestDifference = 0;
        int minSoFar = Integer.MAX_VALUE;
        for(int i = 0;i<prices.length;i++){
            if(prices[i]<minSoFar){
                minSoFar = prices[i];
            }
            largestDifference = Math.max(largestDifference,prices[i]-minSoFar);
        }
        return largestDifference;
    }
}

TC >> O(n)
SC >> O(1)

Approach is to find the minSoFar and keep track of the largestDiff and update it moving forward. 
