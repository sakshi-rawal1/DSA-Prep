You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

class Solution {
    public int maxArea(int[] height) {
        //define pointers
        int L = 0, R = height.length-1; 
        //define maxArea
        int maxArea = Integer.MIN_VALUE;
        //find the maxArea 
        while(L<R){
            //calculate curr area
            int area = (R - L) * Math.min(height[L],height[R]);
            //update maxArea
            maxArea = Math.max(area,maxArea);
            //move the pointers accordingly
            if(height[L]<height[R]){
                L++;
            }
            else if(height[L]>height[R]){
                R--;
            }
            else{
                L++;
                R--;
            }
        }
        //return maxArea
        return maxArea;
    }
}
