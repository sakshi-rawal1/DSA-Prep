Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        for(int i =0;i<nums.length && nums[i]<=0;i++){
            if(i==0 || nums[i] != nums[i-1]){
                twoSum(nums, i, result);
            }
        }
        return result;
    }
    
    public void twoSum(int[] nums,int i, List<List<Integer>> result){
        int L = i+1;
        int H = nums.length - 1;
        while(L<H){
            int sum = nums[i] + nums[L]+ nums[H];
            if(sum == 0){
                result.add(Arrays.asList(nums[i],nums[L++],nums[H--]));
                while(L<H && nums[L] == nums[L-1]){
                    L++;
                }
            }
            else if(sum<0){
                L++;
            }
            else{
                H--;
            }
        }
    }
}
