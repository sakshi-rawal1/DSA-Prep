An array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.

 

Example 1:

Input: arr = [0,1,0]
Output: 1

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int l = 0;
        int h = arr.length -1;
        int mid = 0;
        while(l <= h){
            mid = l + (h - l)/2;
            if( (mid > 0 && arr[mid-1]< arr[mid]) && (mid<h && arr[mid]>arr[mid+1])){
                return mid;
            }
            else if (mid > 0 && arr[mid-1]>arr[mid]){
                h = mid - 1;
            }
            else {
                l = mid + 1;
            }
                
        }
        return mid;
    }
}
