Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) 
is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Approach 1 : O(n) space 

class Solution {
    public int trap(int[] height) {
        int N = height.length;
        int[] maxLeft = new int[N];
        int[] maxRight = new int[N];
        
        int leftMax = height[0];
        maxLeft[0] = 0;
        for(int i = 1;i<N;i++){
            leftMax = Math.max(leftMax,height[i-1]);
            maxLeft[i] = leftMax;
        }
        
        int rightMax = height[N-1];
        maxRight[N-1] = 0;
        for(int i = N-2;i>=0;i--){
            rightMax = Math.max(rightMax,height[i+1]);
            maxRight[i] = rightMax; 
        }
        
        int trapped_water = 0;
        for(int i = 1;i<N-1;i++){
            if(Math.min(maxLeft[i],maxRight[i]) - height[i] >0)
            trapped_water += Math.min(maxLeft[i],maxRight[i]) - height[i];
        }
        return trapped_water;
    }
}

Approach 2 : O(1) space 

class Solution {
    public int trap(int[] height) {
        //define pointers
        int N = height.length;
        int leftMax = height[0];
        int rightMax = height[N-1];
        int L = 1;
        int R = N-2;
        int trapped_water  = 0;
        
        //find trapped water area
        while(L<=R){
            if(leftMax <= rightMax){
                if(leftMax<height[L]){
                    leftMax = height[L];
                }
                else{
                    trapped_water += leftMax - height[L];
                }
                L++;
            } 
            else{
                if(rightMax<height[R]){
                    rightMax = height[R];
                }
                else{
                    trapped_water += rightMax - height[R];
                }
                R--;
            }
        }
    return trapped_water;
    }
}
